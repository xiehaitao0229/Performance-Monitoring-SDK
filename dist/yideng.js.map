{"version":3,"file":"yideng.js","sources":["../src/typings/types.ts","../src/data/constants.ts","../src/data/ReportData.ts","../src/config/index.ts","../src/helpers/getNetworkInformation.ts","../src/helpers/isLowEnd.ts","../src/helpers/onVisibilityChange.ts","../src/helpers/utils.ts","../src/helpers/vitalsScore.ts","../src/data/reportPerf.ts","../src/helpers/getNavigatorInfo.ts","../src/data/log.ts","../src/data/metrics.ts","../src/performance/cumulativeLayoutShift.ts","../src/performance/observeInstances.ts","../src/performance/performanceObserver.ts","../src/performance/firstInput.ts","../src/performance/totalBlockingTime.ts","../src/performance/paint.ts","../src/performance/resourceTiming.ts","../src/performance/observe.ts","../src/error/index.ts","../src/data/analyticsTracker.ts","../src/data/reportData.ts","../src/data/storageEstimate.ts","../src/yideng.ts","../src/tools/isSupported.ts","../src/performance/getNavigationTiming.ts","../src/helpers/isSupported.ts"],"sourcesContent":["export interface IYidengDataConsumption {\n  beacon: number;\n  css: number;\n  fetch: number;\n  img: number;\n  other: number;\n  script: number;\n  total: number;\n  xmlhttprequest: number;\n}\nexport interface IYidengNavigationTiming {\n  fetchTime?: number;\n  workerTime?: number;\n  totalTime?: number;\n  downloadTime?: number;\n  timeToFirstByte?: number;\n  headerSize?: number;\n  dnsLookupTime?: number;\n  tcpTime?: number;\n  whiteTime?: number;\n  domTime?: number;\n  loadTime?: number;\n  parseDomTime?: number;\n}\nexport type EffectiveConnectionType =\n  | '2g'\n  | '3g'\n  | '4g'\n  | '5g'\n  | 'slow-2g'\n  | 'lte';\nexport interface IYidengNetworkInformation {\n  downlink?: number;\n  effectiveType?: EffectiveConnectionType;\n  onchange?: () => void;\n  rtt?: number;\n  saveData?: boolean;\n}\nexport type IYidengData =\n  | number\n  | IYidengNavigationTiming\n  | IYidengNetworkInformation;\n\nexport interface INavigatorInfo {\n  deviceMemory?: number;\n  hardwareConcurrency?: number;\n  isLowEndDevice?: boolean;\n  isLowEndExperience?: boolean;\n  serviceWorkerStatus?: 'controlled' | 'supported' | 'unsupported';\n}\nexport type IVitalsScore = 'good' | 'needsImprovement' | 'poor' | null;\n\nexport interface IAnalyticsTrackerOptions {\n  metricName: string;\n  data: IYidengData;\n  eventProperties: object;\n  navigatorInformation: INavigatorInfo;\n  vitalsScore: IVitalsScore;\n}\nexport interface IYidengOptions {\n  // Metrics\n  captureError?: boolean;\n  resourceTiming?: boolean;\n  elementTiming?: boolean;\n  // Analytics\n  analyticsTracker?: (options: IAnalyticsTrackerOptions) => void;\n  // Logging\n  maxMeasureTime?: number;\n  logUrl?: string;\n}\nexport interface IReportData {\n  sendToAnalytics(level: AskPriority, body: string): void;\n}\n/**\n * @param isResourceTiming - 是否开启资源数据\n * @param isElementTiming - 是否开启性能数据\n * @param analyticsTracker - 最大请求时间\n * @param analyticsTracker - void方法参数IAnalyticsTrackerOptions\n * @param maxTime - 自定义分析工具\n * @interface 系统配置接口\n * @public\n */\nexport interface IYidengConfig {\n  reportData: IReportData;\n  isResourceTiming: boolean;\n  isElementTiming: boolean;\n  analyticsTracker?: (options: IAnalyticsTrackerOptions) => void;\n  maxTime: number;\n}\n\nexport interface IPerfObservers {\n  [measureName: string]: any;\n}\n//性能指标参数\nexport type IPerformanceObserverType =\n  | 'first-input'\n  | 'largest-contentful-paint'\n  | 'layout-shift'\n  | 'longtask'\n  | 'measure'\n  | 'navigation'\n  | 'paint'\n  | 'element'\n  | 'resource';\n//性能指标具体请求类型\nexport type IPerformanceEntryInitiatorType =\n  | 'beacon'\n  | 'css'\n  | 'fetch'\n  | 'img'\n  | 'other'\n  | 'script'\n  | 'xmlhttprequest';\nexport declare interface IPerformanceEntry {\n  decodedBodySize?: number;\n  duration: number;\n  entryType: IPerformanceObserverType;\n  initiatorType?: IPerformanceEntryInitiatorType;\n  loadTime: number;\n  name: string;\n  renderTime: number;\n  startTime: number;\n  hadRecentInput?: boolean;\n  value?: number;\n  identifier?: string;\n}\n//度量指标数据\nexport interface IMetricMap {\n  [measureName: string]: boolean;\n}\n// https://wicg.github.io/event-timing/#sec-performance-event-timing\nexport interface PerformanceEventTiming extends PerformanceEntry {\n  processingStart: DOMHighResTimeStamp;\n  target?: Node;\n}\n//请求响应优先级\nexport enum AskPriority {\n  URGENT = 1,\n  IDLE = 2,\n}\n","interface Navigator {\n  estimate: any;\n  storage: any;\n  deviceMemory?: number;\n  hardwareConcurrency?: number;\n  connection?: string;\n  effectiveType?: string;\n  serviceWorker?: {\n    controller?: string;\n  };\n  sendBeacon?: any;\n}\nexport const W = window;\nexport const C = W.console;\nexport const D = document;\nexport const WN = (W.navigator as unknown) as Navigator;\nexport const WP = W.performance;\n\n//内存\nexport const getDM = () => WN.deviceMemory ?? 0;\n//cpu核数\nexport const getHC = () => WN.hardwareConcurrency ?? 0;\n","import { AskPriority, IReportData } from '../typings/types';\nimport { W, WN } from './constants';\n\n//上报工具\ntype TrackerOptions = {\n  logUrl: string;\n};\nclass ReportData implements IReportData {\n  private logUrl: string;\n  constructor(options: TrackerOptions) {\n    // console.log('⏰', options);\n    const { logUrl } = options;\n    if (logUrl) {\n      this.logUrl = logUrl;\n    } else {\n      throw new Error('请传递要记录数据的路由~');\n    }\n  }\n  public sendToAnalytics(level: AskPriority, body: string, uri?: string) {\n    let logurl = this.logUrl;\n    //临时更换其他url\n    if (uri) {\n      logurl = uri;\n    }\n    // console.log('路由', logurl);\n    if (level == AskPriority.URGENT) {\n      if (!!W.fetch) {\n        fetch(logurl, { body, method: 'POST', keepalive: true });\n      } else {\n        let xhr: XMLHttpRequest | null = new XMLHttpRequest();\n        xhr.open('post', logurl, true);\n        // 设置请求头\n        xhr.setRequestHeader('Content-Type', 'application/json');\n        xhr.send(body); // 发送参数\n        xhr.onload = function (e) {\n          //   if (this.status == 200 || this.status == 304) {\n          //     alert(this.responseText);\n          //   }\n          //及时清理以防多次创建\n          xhr = null;\n        };\n      }\n    } else if (level == AskPriority.IDLE) {\n      if (!!WN.sendBeacon) {\n        navigator.sendBeacon(logurl, body);\n      } else {\n        let img: HTMLImageElement | null = new Image();\n        img.src = `${logurl}?body=${body}`;\n        img.onload = function () {\n          //统计完成收回创建的元素防止内存泄露\n          img = null;\n        };\n      }\n    }\n  }\n}\nexport default ReportData;\n","import ReportData from '../data/ReportData';\nimport { IYidengConfig, IReportData } from '../typings/types';\n\nexport const config: IYidengConfig = {\n  // Metrics\n  reportData: new ReportData({ logUrl: 'hole' }),\n  isResourceTiming: false,\n  isElementTiming: false,\n  // Logging\n  maxTime: 15000,\n};\n","import { WN } from '../data/constants';\nimport {\n  EffectiveConnectionType,\n  IYidengNetworkInformation,\n} from '../typings/types';\n\nexport let et: EffectiveConnectionType = '4g';\nexport let sd = false;\n\nexport const getNetworkInformation = (): IYidengNetworkInformation => {\n  if ('connection' in WN) {\n    const dataConnection = (WN as any).connection;\n    if (typeof dataConnection !== 'object') {\n      return {};\n    }\n    et = dataConnection.effectiveType;\n    sd = !!dataConnection.saveData;\n    return {\n      downlink: dataConnection.downlink,\n      effectiveType: dataConnection.effectiveType,\n      rtt: dataConnection.rtt,\n      saveData: !!dataConnection.saveData,\n    };\n  } else {\n    //todo 这里我们使用多普勒测速法或者直接用图片探测法\n  }\n  return {};\n};\n","import { getDM, getHC } from '../data/constants';\nimport { EffectiveConnectionType } from '../typings/types';\n\nexport const getIsLowEndDevice = (): boolean => {\n  // If number of logical processors available to run threads <= 4\n  if (getHC() && getHC() <= 4) {\n    return true;\n  }\n  // If the approximate amount of RAM client device has <= 4\n  if (getDM() && getDM() <= 4) {\n    return true;\n  }\n  return false;\n};\n\nexport const getIsLowEndExperience = (\n  et: EffectiveConnectionType,\n  sd: boolean\n): boolean => {\n  // If the effective type of the connection meaning\n  // one of 'slow-2g', '2g', '3g', or '4g' is !== 4g\n  switch (et) {\n    case 'slow-2g':\n      return true;\n      break;\n    case '2g':\n      return true;\n      break;\n    case '3g':\n      return true;\n      break;\n    default:\n      // Data Saver preference\n      return getIsLowEndDevice() || sd;\n  }\n};\n","import { D } from '../data/constants';\n\nexport const visibility = {\n  isHidden: false,\n};\n\n/**\n * From visibilitychange listener it saves only when\n * the page gets hidden, because it's important to not\n * use the wrong \"hidden\" value when send timing or logging.\n */\nexport const didVisibilityChange = function (cb: Function) {\n  if (D.hidden) {\n    cb();\n    visibility.isHidden = D.hidden;\n  }\n};\n","import { W } from '../data/constants';\n\nexport const roundByTwo = (num: number) => {\n  return parseFloat(num.toFixed(2));\n};\n\nexport const convertToKB = (bytes: number): number | null => {\n  if (typeof bytes !== 'number') {\n    return null;\n  }\n  return roundByTwo(bytes / Math.pow(1024, 2));\n};\n\n/**\n * PushTask to requestIdleCallback\n * 高效利用每一帧进行数据的收集\n */\nexport const pushTask = (cb: any): void => {\n  if ('requestIdleCallback' in W) {\n    (W as any).requestIdleCallback(cb, { timeout: 3000 });\n  } else {\n    cb();\n  }\n};\n","import { IYidengData, IVitalsScore } from '../typings/types';\n\n//https://web.dev/vitals/\nconst fcpScore = [1000, 2500];\nconst lcpScore = [2500, 4000];\nconst fidcore = [100, 300];\nconst clsScore = [0.1, 0.25];\nconst tbtScore = [300, 600];\n\nexport const webVitalsScore: Record<string, number[]> = {\n  fp: fcpScore,\n  fcp: fcpScore,\n  lcp: lcpScore,\n  lcpFinal: lcpScore,\n  fid: fidcore,\n  fidVitals: fidcore,\n  cls: clsScore,\n  clsFinal: clsScore,\n  tbt: tbtScore,\n  tbt5S: tbtScore,\n  tbt10S: tbtScore,\n  tbtFinal: tbtScore,\n};\n\nexport const getVitalsScore = (\n  measureName: string,\n  value: IYidengData\n): IVitalsScore => {\n  if (!webVitalsScore[measureName]) {\n    return null;\n  }\n  if (value <= webVitalsScore[measureName][0]) {\n    return 'good';\n  }\n  return value <= webVitalsScore[measureName][1] ? 'needsImprovement' : 'poor';\n};\n","import { config } from '../config';\nimport { getNavigatorInfo } from '../helpers/getNavigatorInfo';\nimport { visibility } from '../helpers/onVisibilityChange';\nimport { pushTask } from '../helpers/utils';\nimport { getVitalsScore } from '../helpers/vitalsScore';\n\n/**\n * Sends the User timing measure to analyticsTracker\n */\nexport const reportPerf = function (\n  measureName: string,\n  data: any,\n  customProperties?: object\n): void {\n  pushTask(() => {\n    //console.log('[ measureName ]', measureName);\n    // 当页面被隐藏的时候不报告具体数据\n    if (\n      (visibility.isHidden && measureName.indexOf('Final') < 0) ||\n      !config.analyticsTracker\n    ) {\n      return;\n    }\n    // Send metric to custom Analytics service\n    config.analyticsTracker({\n      metricName: measureName,\n      data,\n      eventProperties: customProperties || {},\n      navigatorInformation: getNavigatorInfo(),\n      vitalsScore: getVitalsScore(measureName, data),\n    });\n  });\n};\n","import { getDM, getHC, WN } from '../data/constants';\nimport { et, sd } from './getNetworkInformation';\nimport { getIsLowEndDevice, getIsLowEndExperience } from './isLowEnd';\nimport { INavigatorInfo } from '../typings/types';\n\n/**\n * 如下信息来源于 window.navigator:\n * 1. Device Memory\n * 2. Hardware Concurency\n * 3. Status of the service worker:\n *     - controlled: a service worker is controlling the page\n *     - supported: the browser supports service worker\n *     - unsupported: the user's browser does not support service worker\n */\nexport const getNavigatorInfo = function (): INavigatorInfo {\n  if (WN) {\n    return {\n      deviceMemory: getDM() || 0,\n      hardwareConcurrency: getHC() || 0,\n      serviceWorkerStatus:\n        'serviceWorker' in WN\n          ? WN.serviceWorker!.controller\n            ? 'controlled'\n            : 'supported'\n          : 'unsupported',\n      isLowEndDevice: getIsLowEndDevice(),\n      isLowEndExperience: getIsLowEndExperience(et, sd),\n    };\n  }\n  return {};\n};\n","import { config } from '../config';\nimport { reportPerf } from '../data/reportPerf';\nimport { roundByTwo } from '../helpers/utils';\n\nexport const logData = (\n  measureName: string,\n  metric: any,\n  customProperties?: object\n): void => {\n  Object.keys(metric).forEach((key) => {\n    if (typeof metric[key] === 'number') {\n      metric[key] = roundByTwo(metric[key]);\n    }\n  });\n  // Sends the metric to an external tracking service\n  reportPerf(measureName, metric, customProperties);\n};\n\n/**\n * Dispatches the metric duration into internal logs\n * and the external time tracking service.\n */\nexport const logMetric = (\n  duration: number,\n  measureName: string,\n  customProperties?: object\n): void => {\n  const duration2Decimal = roundByTwo(duration);\n  if (duration2Decimal <= config.maxTime && duration2Decimal >= 0) {\n    // 从内部或者外部的报告工具报告指标数据\n    reportPerf(measureName, duration2Decimal, customProperties);\n  }\n};\n","import { IMetricMap, IYidengDataConsumption } from '../typings/types';\n\nexport const metrics: IMetricMap = {};\nexport const cls = {\n  value: 0,\n};\nexport const fcp = {\n  value: 0,\n};\nexport const lcp = {\n  value: 0,\n};\nexport const fcpEntryName = 'first-contentful-paint';\nexport const rt: { value: IYidengDataConsumption } = {\n  value: {\n    beacon: 0,\n    css: 0,\n    fetch: 0,\n    img: 0,\n    other: 0,\n    script: 0,\n    total: 0,\n    xmlhttprequest: 0,\n  },\n};\n//主线程总阻塞时间\nexport const tbt = {\n  value: 0,\n};\n","import { cls } from '../data/metrics';\nimport { IPerformanceEntry } from '../typings/types';\n\n/**\n * Detects new layout shift occurrences and updates the\n * `cumulativeLayoutShiftScore` variable.\n */\nexport const initLayoutShift = (performanceEntries: IPerformanceEntry[]) => {\n  const lastEntry = performanceEntries.pop();\n  // Only count layout shifts without recent user input.\n  if (lastEntry && !lastEntry.hadRecentInput && lastEntry.value) {\n    cls.value += lastEntry.value;\n  }\n};\n","import { IPerfObservers } from '../typings/types';\n/**\n * @remarks 核心性能数据指标对象\n * @public\n */\nexport const perfObservers: IPerfObservers = {};\n","import { C } from '../data/constants';\nimport { perfObservers } from './observeInstances';\nimport { IPerformanceObserverType } from '../typings/types';\n\n/**\n * PerformanceObserver 异步订阅封装\n */\nexport const po = (\n  eventType: IPerformanceObserverType,\n  cb: (performanceEntries: any[]) => void\n): PerformanceObserver | null => {\n  try {\n    const perfObserver = new PerformanceObserver((entryList) => {\n      cb(entryList.getEntries());\n    });\n    // 订阅时间或者开始计时 buffered不立即执行在内存中留下PerformanceObserver实例\n    perfObserver.observe({ type: eventType, buffered: true });\n    return perfObserver;\n  } catch (e) {\n    C.warn('Yideng.js:', e);\n  }\n  return null;\n};\n//断开测试通道\nexport const poDisconnect = (observer: any) => {\n  if (perfObservers[observer]) {\n    perfObservers[observer].disconnect();\n  }\n  delete perfObservers[observer];\n};\n","import { logData, logMetric } from '../data/log';\nimport { cls, lcp, rt, tbt } from '../data/metrics';\nimport { perfObservers } from './observeInstances';\nimport { poDisconnect } from './performanceObserver';\nimport { PerformanceEventTiming } from '../typings/types';\n\nexport const initFirstInputDelay = (\n  performanceEntries: PerformanceEventTiming[]\n) => {\n  //取最后的一位即为我们希望所获取的时间点\n  const lastEntry = performanceEntries.pop();\n  if (lastEntry) {\n    // Core Web Vitals FID logic\n    // 测量输入事件的延迟操作\n    logMetric(lastEntry.processingStart - lastEntry.startTime, 'fidVitals', {\n      performanceEntry: lastEntry,\n    });\n    // 传统的FID逻辑\n    // Measure the duration of processing the first input event\n    logMetric(lastEntry.duration, 'fid', {\n      performanceEntry: lastEntry,\n    });\n  }\n  // 销毁对FID的注册回调 避免过多的观察者造成内存泄露\n  poDisconnect(1);\n  //初始化lcp\n  logMetric(lcp.value, 'lcp');\n  if (perfObservers[3] && typeof perfObservers[3].takeRecords === 'function') {\n    perfObservers[3].takeRecords();\n  }\n  logMetric(cls.value, 'cls');\n  logMetric(tbt.value, 'tbt');\n  // TBT with 5 second delay after FID\n  setTimeout(() => {\n    logMetric(tbt.value, `tbt5S`);\n  }, 5000);\n  // TBT with 10 second delay after FID\n  setTimeout(() => {\n    logMetric(tbt.value, `tbt10S`);\n    //FID被激活以后10S的整体数据消耗\n    logData('dataConsumption', rt.value);\n  }, 10000);\n};\n","import { fcp, tbt } from '../data/metrics';\nimport { IPerformanceEntry } from '../typings/types';\n\nexport const initTotalBlockingTime = (\n  performanceEntries: IPerformanceEntry[]\n): void => {\n  performanceEntries.forEach((entry) => {\n    //从fcp -> tti获取长耗时任务（self表示耗时长任务来自于渲染帧）\n    // console.log('🍌', entry);\n    if (entry.name !== 'self' || entry.startTime < fcp.value) {\n      return;\n    }\n    // console.log('🍌2', entry);\n    //https://developer.mozilla.org/zh-CN/docs/Web/API/Long_Tasks_API\n    //长耗时任务意味着执行时间超过50ms的\n    const blockingTime = entry.duration - 50;\n    if (blockingTime > 0) {\n      tbt.value += blockingTime;\n    }\n  });\n};\n","import { IPerformanceEntry } from '../typings/types';\nimport { fcp, fcpEntryName, lcp } from '../data/metrics';\nimport { po, poDisconnect } from './performanceObserver';\nimport { perfObservers } from './observeInstances';\nimport { initTotalBlockingTime } from './totalBlockingTime';\nimport { logMetric } from '../data/log';\nexport const initFirstPaint = (performanceEntries: IPerformanceEntry[]) => {\n  performanceEntries.forEach((entry) => {\n    if (entry.name === 'first-paint') {\n      logMetric(entry.startTime, 'fp');\n    } else if (entry.name === fcpEntryName) {\n      fcp.value = entry.startTime;\n      logMetric(fcp.value, 'fcp');\n      perfObservers[4] = po('longtask', initTotalBlockingTime);\n      poDisconnect(0);\n    }\n  });\n};\nexport const initLargestContentfulPaint = (\n  performanceEntries: IPerformanceEntry[]\n) => {\n  const lastEntry = performanceEntries.pop();\n  if (lastEntry) {\n    lcp.value = lastEntry.renderTime || lastEntry.loadTime;\n  }\n};\nexport const initElementTiming = (performanceEntries: IPerformanceEntry[]) => {\n  performanceEntries.forEach((entry) => {\n    if (entry.identifier) {\n      logMetric(entry.startTime, entry.identifier);\n    }\n  });\n};\n","import { config } from '../config';\nimport { logData } from '../data/log';\nimport { rt } from '../data/metrics';\nimport { IPerformanceEntry } from '../typings/types';\n\nexport const initResourceTiming = (performanceEntries: IPerformanceEntry[]) => {\n  //console.log('🐶', performanceEntries);\n  performanceEntries.forEach((entry) => {\n    //console.log('🐶', 1);\n    if (config.isResourceTiming) {\n      logData('resourceTiming', entry);\n    }\n    if (entry.decodedBodySize && entry.initiatorType) {\n      const bodySize = entry.decodedBodySize / 1000;\n      rt.value[entry.initiatorType] += bodySize;\n      rt.value.total += bodySize;\n    }\n  });\n};\n","import { config } from '../config';\nimport { logMetric } from '../data/log';\nimport { cls, lcp, tbt } from '../data/metrics';\nimport { initLayoutShift } from './cumulativeLayoutShift';\nimport { initFirstInputDelay } from './firstInput';\nimport { perfObservers } from './observeInstances';\nimport {\n  initElementTiming,\n  initFirstPaint,\n  initLargestContentfulPaint,\n} from './paint';\nimport { po, poDisconnect } from './performanceObserver';\nimport { initResourceTiming } from './resourceTiming';\nexport const initPerformanceObserver = (): void => {\n  console.log('⏰ 性能收集开始', Math.random());\n  perfObservers[0] = po('paint', initFirstPaint);\n  perfObservers[1] = po('first-input', initFirstInputDelay);\n  perfObservers[2] = po('largest-contentful-paint', initLargestContentfulPaint);\n  //收集页面全部资源性能数据\n  if (config.isResourceTiming) {\n    console.log('📚 收集页面性能数据');\n    po('resource', initResourceTiming);\n  }\n  perfObservers[3] = po('layout-shift', initLayoutShift);\n  if (config.isElementTiming) {\n    po('element', initElementTiming);\n  }\n};\n\nexport const disconnectPerfObserversHidden = (): void => {\n  if (perfObservers[2]) {\n    logMetric(lcp.value, `lcpFinal`);\n    poDisconnect(2);\n  }\n  if (perfObservers[3]) {\n    if (typeof perfObservers[3].takeRecords === 'function') {\n      perfObservers[3].takeRecords();\n    }\n    logMetric(cls.value, `clsFinal`);\n    poDisconnect(3);\n  }\n  if (perfObservers[4]) {\n    logMetric(tbt.value, `tbtFinal`);\n    poDisconnect(4);\n  }\n};\n","import { config } from '../config';\nimport { W } from '../data/constants';\n//rrweb引入到了这里\nimport { AskPriority } from '../typings/types';\ntype ErrorInfo = {};\nclass ErrorTrace {\n  private errordefo: ErrorInfo;\n  constructor() {\n    this.errordefo = {};\n  }\n  //全局捕获同步+异步错误\n  private globalError() {\n    console.log('上报sdk');\n    console.log('[ ❌全局捕获错误 ]');\n    W.onerror = (\n      eventOrMessage: Event | string,\n      scriptURI?: string,\n      lineno?: number,\n      colno?: number,\n      error?: Error\n    ): boolean => {\n      console.log('[ 我知道错误了 ]', eventOrMessage);\n      const errorInfo = JSON.stringify({\n        scriptURI,\n        lineno,\n        colno,\n        error,\n      });\n      //通过错误信息还原sourcemap源文件地址\n      console.log(errorInfo);\n      config.reportData.sendToAnalytics(AskPriority.IDLE, errorInfo);\n      return true;\n    };\n  }\n  //资源挂载失败 如404png\n  private networkError() {\n    W.addEventListener(\n      'error',\n      function (e: ErrorEvent) {\n        if (e.target !== W) {\n          console.log('🖼网络错误', e.target);\n        }\n      },\n      true\n    );\n  }\n  //异步Promise错误\n  private promiseError() {\n    W.addEventListener('unhandledrejection', function (e) {\n      e.preventDefault();\n      console.log('我知道 promise 的错误了', e.reason);\n      return true;\n    });\n  }\n  private iframeError() {\n    const frames = W.frames;\n    for (let i = 0; i < frames.length; i++) {\n      frames[i].addEventListener(\n        'error',\n        (e) => {\n          console.log('addEventListener');\n          console.log(e);\n        },\n        true\n      );\n\n      frames[i].addEventListener(\n        'unhandledrejection',\n        function (e) {\n          console.log('unhandledrejection');\n        },\n        true\n      );\n    }\n  }\n  // private consoleReflect() {\n  //   const console_error = W.console.error;\n  //   W.console.error = function () {\n  //     config.reportData.sendToAnalytics(AskPriority.IDLE, errorInfo);\n  //     console_error.apply(window, arguments);\n  //   };\n  // }\n  public run() {\n    this.networkError();\n    //触发全体数据监听错误\n    this.globalError();\n    //触发promise的错误\n    this.promiseError();\n  }\n}\nexport default ErrorTrace;\n","import { IAnalyticsTrackerOptions } from '../typings/types';\nconst analyticsTracker = (options: IAnalyticsTrackerOptions): void => {\n  //   console.log(Math.random());\n  //   console.log('-------');\n  const {\n    metricName,\n    eventProperties,\n    data,\n    navigatorInformation,\n    vitalsScore,\n  } = options;\n  console.log(options);\n};\nexport default analyticsTracker;\n","import { AskPriority, IReportData } from '../typings/types';\nimport { W, WN } from './constants';\n\n//上报工具\ntype TrackerOptions = {\n  logUrl: string;\n};\nclass ReportData implements IReportData {\n  private logUrl: string;\n  constructor(options: TrackerOptions) {\n    // console.log('⏰', options);\n    const { logUrl } = options;\n    if (logUrl) {\n      this.logUrl = logUrl;\n    } else {\n      throw new Error('请传递要记录数据的路由~');\n    }\n  }\n  public sendToAnalytics(level: AskPriority, body: string, uri?: string) {\n    let logurl = this.logUrl;\n    //临时更换其他url\n    if (uri) {\n      logurl = uri;\n    }\n    // console.log('路由', logurl);\n    if (level == AskPriority.URGENT) {\n      if (!!W.fetch) {\n        fetch(logurl, { body, method: 'POST', keepalive: true });\n      } else {\n        let xhr: XMLHttpRequest | null = new XMLHttpRequest();\n        xhr.open('post', logurl, true);\n        // 设置请求头\n        xhr.setRequestHeader('Content-Type', 'application/json');\n        xhr.send(body); // 发送参数\n        xhr.onload = function (e) {\n          //   if (this.status == 200 || this.status == 304) {\n          //     alert(this.responseText);\n          //   }\n          //及时清理以防多次创建\n          xhr = null;\n        };\n      }\n    } else if (level == AskPriority.IDLE) {\n      if (!!WN.sendBeacon) {\n        navigator.sendBeacon(logurl, body);\n      } else {\n        let img: HTMLImageElement | null = new Image();\n        img.src = `${logurl}?body=${body}`;\n        img.onload = function () {\n          //统计完成收回创建的元素防止内存泄露\n          img = null;\n        };\n      }\n    }\n  }\n}\nexport default ReportData;\n","import { logData } from './log';\nimport { convertToKB } from '../helpers/utils';\n\n/**\n * The estimate() method of the StorageManager interface asks the Storage Manager\n * for how much storage the app takes up (usage),\n * and how much space is available (quota).\n */\nexport const reportStorageEstimate = (storageInfo: StorageEstimate) => {\n  const estimateUsageDetails =\n    'usageDetails' in storageInfo ? (storageInfo as any).usageDetails : {};\n  logData('storageEstimate', {\n    quota: convertToKB((storageInfo as any).quota),\n    usage: convertToKB((storageInfo as any).usage),\n    caches: convertToKB(estimateUsageDetails.caches),\n    indexedDB: convertToKB(estimateUsageDetails.indexedDB),\n    serviceWorker: convertToKB(estimateUsageDetails.serviceWorkerRegistrations),\n  });\n};\n","/**\n * 一款免费的开源性能监控SDK\n *\n * @remarks\n * 目前能够完成监控的指标包含FCP等\n *\n * @packageDocumentation\n */\nimport { config } from './config';\nimport { D, W, WN, WP } from './data/constants';\nimport { logData } from './data/log';\nimport { getNavigationTiming } from './performance/getNavigationTiming';\nimport {\n  disconnectPerfObserversHidden,\n  initPerformanceObserver,\n} from './performance/observe';\nimport { isPerformanceSupported } from './tools/isSupported';\nimport { IReportData, IYidengOptions } from './typings/types';\nimport ErrorTrace from './error';\nimport analyticsTracker from './data/analyticsTracker';\nimport ReportData from './data/reportData';\nimport { didVisibilityChange } from './helpers/onVisibilityChange';\nimport { getNetworkInformation } from './helpers/getNetworkInformation';\nimport { reportStorageEstimate } from './data/storageEstimate';\n\nexport default class Yideng {\n  private v = '1.0.0';\n  private reportData: IReportData;\n  constructor(options: IYidengOptions = {}) {\n    // 扩展基础配置\n    const logUrl = options.logUrl;\n    if (!logUrl) {\n      throw new Error(`京程一灯系统监控平台${this.v}提示未传递logUrl`);\n    }\n    //向后台输送数据\n    const insReportData = new ReportData({\n      logUrl,\n    });\n    config.reportData = insReportData;\n    //对外暴露上传接口\n    this.reportData = insReportData;\n    //集合数据汇总\n    const _analyticsTracker = options.analyticsTracker;\n    if (_analyticsTracker) {\n      config.analyticsTracker = _analyticsTracker;\n    } else {\n      config.analyticsTracker = analyticsTracker;\n    }\n    config.isResourceTiming = !!options.resourceTiming;\n    config.isElementTiming = !!options.elementTiming;\n    config.maxTime = options.maxMeasureTime || config.maxTime;\n\n    if (options.captureError) {\n      //开启错误跟踪\n      const errorTtace = new ErrorTrace();\n      errorTtace.run();\n    }\n\n    //如果浏览器不支持性能指标只能放弃\n    if (!isPerformanceSupported()) {\n      return;\n    }\n    //浏览器支持的起FRP这样的Observer统计性能\n    if ('PerformanceObserver' in W) {\n      initPerformanceObserver();\n    }\n    //初始化\n    if (typeof D.hidden !== 'undefined') {\n      // Opera 12.10 and Firefox 18 and later support\n      D.addEventListener(\n        'visibilitychange',\n        didVisibilityChange.bind(this, disconnectPerfObserversHidden)\n      );\n    }\n    //记录系统DNS请求+白屏时间等\n    logData('navigationTiming', getNavigationTiming());\n    //记录用户的网速 H5+多普勒测速\n    logData('networkInformation', getNetworkInformation());\n    //管理离线缓存数据\n    if (WN && WN.storage && typeof WN.storage.estimate === 'function') {\n      WN.storage.estimate().then(reportStorageEstimate);\n    }\n  }\n}\n","import { W, WP } from '../data/constants';\n\n/**\n * True if the browser supports the Navigation Timing API,\n * User Timing API and the PerformanceObserver Interface.\n * In Safari, the User Timing API (performance.mark()) is not available,\n * so the DevTools timeline will not be annotated with marks.\n * Support: developer.mozilla.org/en-US/docs/Web/API/Performance/mark\n * Support: developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver\n * Support: developer.mozilla.org/en-US/docs/Web/API/Performance/getEntriesByType\n */\nexport const isPerformanceSupported = (): boolean => {\n  return WP && !!WP.getEntriesByType && !!WP.now && !!WP.mark;\n};\n","import { WP } from '../data/constants';\nimport { isPerformanceSupported } from '../helpers/isSupported';\nimport { IYidengNavigationTiming } from '../typings/types';\n\n/**\n * Navigation Timing API provides performance metrics for HTML documents.\n * w3c.github.io/navigation-timing/\n * developers.google.com/web/fundamentals/performance/navigation-and-resource-timing\n */\nexport const getNavigationTiming = (): IYidengNavigationTiming => {\n  if (!isPerformanceSupported()) {\n    return {};\n  }\n  // There is an open issue to type correctly getEntriesByType\n  // github.com/microsoft/TypeScript/issues/33866\n  // 这里直接的物理赋值performance.timing 已被弃用\n  const n = WP.getEntriesByType('navigation')[0] as any;\n  // In Safari version 11.2 Navigation Timing isn't supported yet\n  if (!n) {\n    return {};\n  }\n  const responseStart = n.responseStart;\n  const responseEnd = n.responseEnd;\n  // We cache the navigation time for future times\n  return {\n    // fetchStart marks when the browser starts to fetch a resource\n    // responseEnd is when the last byte of the response arrives\n    fetchTime: responseEnd - n.fetchStart,\n    // Service worker time plus response time\n    workerTime: n.workerStart > 0 ? responseEnd - n.workerStart : 0,\n    // Request plus response time (network only)\n    totalTime: responseEnd - n.requestStart,\n    // Response time only (download)\n    downloadTime: responseEnd - responseStart,\n    // Time to First Byte (TTFB)\n    timeToFirstByte: responseStart - n.requestStart,\n    // HTTP header size\n    headerSize: n.transferSize - n.encodedBodySize || 0,\n    //DNS解析时间\n    dnsLookupTime: n.domainLookupEnd - n.domainLookupStart,\n    //TCP建立时间\n    tcpTime: n.connectEnd - n.connectStart || 0,\n    // 白屏时间\n    whiteTime: n.responseStart - n.navigationStart || 0,\n    //dom渲染完成时间\n    domTime: n.domContentLoadedEventEnd - n.navigationStart || 0,\n    //页面onload时间\n    loadTime: n.loadEventEnd - n.navigationStart || 0,\n    //页面解析dom耗时\n    parseDomTime: n.domComplete - n.domInteractive || 0,\n  };\n};\n","import { W, WP } from '../data/constants';\n\n/**\n * True if the browser supports the Navigation Timing API,\n * User Timing API and the PerformanceObserver Interface.\n * In Safari, the User Timing API (performance.mark()) is not available,\n * so the DevTools timeline will not be annotated with marks.\n * Support: developer.mozilla.org/en-US/docs/Web/API/Performance/mark\n * Support: developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver\n * Support: developer.mozilla.org/en-US/docs/Web/API/Performance/getEntriesByType\n */\nexport const isPerformanceSupported = (): boolean => {\n  return WP && !!WP.getEntriesByType && !!WP.now && !!WP.mark;\n};\n"],"names":["AskPriority","W","window","C","console","D","document","WN","navigator","WP","performance","getDM","_WN$deviceMemory","deviceMemory","getHC","_WN$hardwareConcurren","hardwareConcurrency","ReportData","options","this","logUrl","Error","prototype","sendToAnalytics","level","body","uri","logurl","URGENT","fetch","method","keepalive","xhr","XMLHttpRequest","open","setRequestHeader","send","onload","e","IDLE","sendBeacon","img","Image","src","config","reportData","isResourceTiming","isElementTiming","maxTime","et","sd","getIsLowEndDevice","getIsLowEndExperience","visibility","isHidden","didVisibilityChange","cb","hidden","roundByTwo","num","parseFloat","toFixed","convertToKB","bytes","Math","pow","fcpScore","lcpScore","fidcore","clsScore","tbtScore","webVitalsScore","fp","fcp","lcp","lcpFinal","fid","fidVitals","cls","clsFinal","tbt","tbt5S","tbt10S","tbtFinal","getVitalsScore","measureName","value","reportPerf","data","customProperties","indexOf","analyticsTracker","metricName","eventProperties","navigatorInformation","serviceWorkerStatus","serviceWorker","controller","isLowEndDevice","isLowEndExperience","vitalsScore","requestIdleCallback","timeout","logData","metric","Object","keys","forEach","key","logMetric","duration","duration2Decimal","rt","beacon","css","other","script","total","xmlhttprequest","initLayoutShift","performanceEntries","lastEntry","pop","hadRecentInput","perfObservers","po","eventType","perfObserver","PerformanceObserver","entryList","getEntries","observe","type","buffered","warn","poDisconnect","observer","disconnect","initFirstInputDelay","processingStart","startTime","performanceEntry","takeRecords","setTimeout","initTotalBlockingTime","entry","name","blockingTime","initFirstPaint","initLargestContentfulPaint","renderTime","loadTime","initElementTiming","identifier","initResourceTiming","decodedBodySize","initiatorType","bodySize","disconnectPerfObserversHidden","ErrorTrace","errordefo","_proto","globalError","log","onerror","eventOrMessage","scriptURI","lineno","colno","error","errorInfo","JSON","stringify","networkError","addEventListener","target","promiseError","preventDefault","reason","iframeError","frames","i","length","run","reportStorageEstimate","storageInfo","estimateUsageDetails","usageDetails","quota","usage","caches","indexedDB","serviceWorkerRegistrations","v","insReportData","resourceTiming","elementTiming","maxMeasureTime","captureError","getEntriesByType","now","mark","random","bind","n","responseStart","responseEnd","fetchTime","fetchStart","workerTime","workerStart","totalTime","requestStart","downloadTime","timeToFirstByte","headerSize","transferSize","encodedBodySize","dnsLookupTime","domainLookupEnd","domainLookupStart","tcpTime","connectEnd","connectStart","whiteTime","navigationStart","domTime","domContentLoadedEventEnd","loadEventEnd","parseDomTime","domComplete","domInteractive","getNavigationTiming","dataConnection","connection","effectiveType","saveData","downlink","rtt","getNetworkInformation","storage","estimate","then"],"mappings":"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"}